// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User profile with demographics and OAuth
model User {
  id                String               @id @default(cuid())
  name              String?
  email             String?              @unique
  emailVerified     DateTime?
  image             String?
  googleId          String?              @unique
  age               Int?
  gender            String?
  heightCm          Float?
  weightKg          Float?
  activityLevel     String?
  openAiApiKey      String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  meals             Meal[]
  recipes           Recipe[]
  healthMetrics     HealthMetric[]
  favorites         Favorite[]
  templates         MealTemplate[]
  accounts          Account[]
  sessions          Session[]
  createdFoods      Food[]               @relation("UserCreatedFoods")
  healthGoals       HealthGoal[]
  medicalConditions MedicalCondition[]
  allergies         Allergy[]
  measurements      Measurement[]
  waterIntakes      WaterIntake[]
  sleepLogs         SleepLog[]
  moodLogs          MoodLog[]
  customMetrics     CustomHealthMetric[]
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth.js VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Food database (core + custom)
model Food {
  id          String       @id @default(cuid())
  name        String
  brand       String?
  barcode     String?      @unique
  type        String?
  cuisine     String?
  dietaryTags String[]
  calories    Float
  protein     Float
  carbs       Float
  fat         Float
  fiber       Float?
  sugar       Float?
  sodium      Float?
  createdById String?
  createdBy   User?        @relation("UserCreatedFoods", fields: [createdById], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  ingredients Ingredient[]
}

// Meals (planned by user)
model Meal {
  id          String        @id @default(cuid())
  userId      String
  name        String
  date        DateTime
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  ingredients Ingredient[]  @relation("MealIngredients")
  templateId  String?
  template    MealTemplate? @relation("TemplateMeals", fields: [templateId], references: [id])
  favorites   Favorite[]
}

// Meal ingredients (linking Food to Meal with portion info)
model Ingredient {
  id         String        @id @default(cuid())
  mealId     String?
  templateId String?
  recipeId   String?
  foodId     String
  amount     Float
  unit       String
  meal       Meal?         @relation("MealIngredients", fields: [mealId], references: [id])
  template   MealTemplate? @relation("TemplateIngredients", fields: [templateId], references: [id])
  recipe     Recipe?       @relation(fields: [recipeId], references: [id])
  food       Food          @relation(fields: [foodId], references: [id])
}

// Meal templates (for quick planning)
model MealTemplate {
  id          String       @id @default(cuid())
  userId      String
  name        String
  createdAt   DateTime     @default(now())
  user        User         @relation(fields: [userId], references: [id])
  ingredients Ingredient[] @relation("TemplateIngredients")
  meals       Meal[]       @relation("TemplateMeals")
}

// Favorite meals/recipes
model Favorite {
  id       String  @id @default(cuid())
  userId   String
  mealId   String?
  recipeId String?
  user     User    @relation(fields: [userId], references: [id])
  meal     Meal?   @relation(fields: [mealId], references: [id])
  recipe   Recipe? @relation(fields: [recipeId], references: [id])
}

// Recipes
model Recipe {
  id           String       @id @default(cuid())
  userId       String
  name         String
  instructions String
  category     String?
  servings     Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  user         User         @relation(fields: [userId], references: [id])
  ingredients  Ingredient[]
  favorites    Favorite[]
}

// Health metrics (weight, water, sleep, etc.)
model HealthMetric {
  id     String   @id @default(cuid())
  userId String
  type   String
  value  Float
  date   DateTime
  notes  String?
  user   User     @relation(fields: [userId], references: [id])
}

model HealthGoal {
  id        String    @id @default(cuid())
  userId    String
  type      String // e.g. weight-loss, muscle-gain, maintenance
  target    Float?
  unit      String?
  startDate DateTime?
  endDate   DateTime?
  active    Boolean   @default(true)
  user      User      @relation(fields: [userId], references: [id])
}

model MedicalCondition {
  id     String  @id @default(cuid())
  userId String
  name   String
  notes  String?
  user   User    @relation(fields: [userId], references: [id])
}

model Allergy {
  id       String  @id @default(cuid())
  userId   String
  name     String
  severity String?
  user     User    @relation(fields: [userId], references: [id])
}

model Measurement {
  id     String   @id @default(cuid())
  userId String
  type   String // e.g. waist, chest, hips
  value  Float
  date   DateTime
  user   User     @relation(fields: [userId], references: [id])
}

model WaterIntake {
  id     String   @id @default(cuid())
  userId String
  amount Float // ml
  date   DateTime
  goal   Float?
  user   User     @relation(fields: [userId], references: [id])
}

model SleepLog {
  id       String   @id @default(cuid())
  userId   String
  duration Float // hours
  quality  Int? // 1-10
  date     DateTime
  user     User     @relation(fields: [userId], references: [id])
}

model MoodLog {
  id     String   @id @default(cuid())
  userId String
  mood   Int // 1-10
  energy Int? // 1-10
  notes  String?
  date   DateTime
  user   User     @relation(fields: [userId], references: [id])
}

model CustomHealthMetric {
  id     String   @id @default(cuid())
  userId String
  name   String
  value  Float
  unit   String?
  date   DateTime
  user   User     @relation(fields: [userId], references: [id])
}
